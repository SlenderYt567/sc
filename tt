-- ! IMPORTANTE: Este script deve ser executado por um executor (ex: Synapse X, Script-Ware, Fluxus).
-- ! Ele não funcionará como um LocalScript comum no Roblox Studio ou em um jogo publicado,
-- ! pois usa game:HttpGet e loadstring.

if game.PlaceId ~= 228181322 then
    return -- Sai do script se não estiver no jogo correto
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "Slender Hub - Dinosaur Simulator",
    LoadingTitle = "Slender Hub",
    LoadingSubtitle = "Script Free",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "SlenderHub",
        FileName = "DinoSimConfig"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- === VARIÁVEIS DE CONTROLE GERAL ===
local ESPAmberEnabled = false
local ESPObjects = {}
local AmberListeners = { Added = nil, Removed = nil }

local originalWalkSpeed = 16
local originalJumpPower = 50
local originalAutoRotate = true

local isAutoEatActive = false
local autoEatTask = nil
local isAutoWaterActive = false
local autoWaterTask = nil

local isAutoDNAActive = false
local autoDNATask = nil

local isAutoCollectActive = false
local autoCollectTask = nil

-- *** NOVAS VARIÁVEIS PARA AUTO DAMAGE ***
local isAutoDamageActive = false
local autoDamageTask = nil
local isAutoAOEDamageActive = false
local autoAOEDamageTask = nil

-- === CONFIGURAÇÕES ===
local SAFE_DNA_FARM_LOCATION = Vector3.new(-310.9116516113281, 949.654052734375, 652.5374145507812)
local AUTO_WALK_SPEED = 70

-- === Funções de ESP Amber (sem alterações) ===
local function DisableESPAmberForPart(part) if not part then return end; local h = part:FindFirstChild("ESPHighlight"); if h then h:Destroy() end; local b = part:FindFirstChild("AmberDistance"); if b then b:Destroy() end; for i = #ESPObjects, 1, -1 do if ESPObjects[i] == part then table.remove(ESPObjects, i); break end end end
local function ClearAllESPAmber() local a = {}; for _, o in pairs(ESPObjects) do table.insert(a, o) end; for _, o in pairs(a) do DisableESPAmberForPart(o) end; table.clear(ESPObjects) end
local function EnableESPAmberForPart(part) if not part or not part:IsA("BasePart") or not part.Name:lower():find("amber") or part:FindFirstChild("ESPHighlight") then return end; local h = Instance.new("Highlight", part); h.Name = "ESPHighlight"; h.FillColor = Color3.fromRGB(255, 130, 0); h.OutlineColor = Color3.fromRGB(255, 255, 255); h.FillTransparency = 0.1; h.Adornee = part; local b = Instance.new("BillboardGui", part); b.Name = "AmberDistance"; b.Size = UDim2.new(0, 100, 0, 20); b.AlwaysOnTop = true; b.StudsOffset = Vector3.new(0, 2.5, 0); b.Adornee = part; local t = Instance.new("TextLabel", b); t.Size = UDim2.new(1, 0, 1, 0); t.BackgroundTransparency = 1; t.TextColor3 = Color3.fromRGB(255, 255, 0); t.TextStrokeTransparency = 0.5; t.TextScaled = true; t.Font = Enum.Font.GothamBold; t.Name = "DistanceLabel"; t.Text = "Loading..."; table.insert(ESPObjects, part) end
local function ScanAndApplyESPAmber() ClearAllESPAmber(); for _, v in pairs(Workspace:GetDescendants()) do if v:IsA("BasePart") and v.Name:lower():find("amber") then EnableESPAmberForPart(v) end end end
local function SetupAmberListeners() AmberListeners.Added = Workspace.DescendantAdded:Connect(function(d) if ESPAmberEnabled and d:IsA("BasePart") and d.Name:lower():find("amber") then EnableESPAmberForPart(d) end end); AmberListeners.Removed = Workspace.DescendantRemoving:Connect(function(d) if d:IsA("BasePart") and d.Name:lower():find("amber") then DisableESPAmberForPart(d) end end) end
local function DisconnectAmberListeners() if AmberListeners.Added then AmberListeners.Added:Disconnect(); AmberListeners.Added = nil end; if AmberListeners.Removed then AmberListeners.Removed:Disconnect(); AmberListeners.Removed = nil end end
task.spawn(function() while task.wait(0.5) do if ESPAmberEnabled then for i = #ESPObjects, 1, -1 do local o = ESPObjects[i]; if not o or not o:IsDescendantOf(Workspace) or not o.Parent then DisableESPAmberForPart(o); continue end; local g = o:FindFirstChild("AmberDistance"); if g and g:FindFirstChild("DistanceLabel") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then local d = math.floor((o.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude); g.DistanceLabel.Text = "Distance: " .. d .. " studs" else DisableESPAmberForPart(o) end end end end end)

-- === Funções de Auto-Walk e Auto Farm ===
local function RestoreHumanoidProperties() local c = LocalPlayer.Character; if c then local h = c:FindFirstChildOfClass("Humanoid"); if h then h.WalkSpeed = originalWalkSpeed; h.JumpPower = originalJumpPower; h.AutoRotate = originalAutoRotate; h:MoveTo(h.Parent.HumanoidRootPart.Position) end end end
local function AutoEatLoop() while isAutoEatActive and LocalPlayer.Character do local f; for _, v in pairs(Workspace:GetDescendants()) do if v:IsA("BasePart") and v.Name:lower():find("leaf") then f = v; break end end; if f then workspace.GameEvents.EatPlant:FireServer(f); task.wait(0.1) else task.wait(2) end; task.wait() end; autoEatTask = nil end
local function AutoWaterLoop() while isAutoWaterActive and LocalPlayer.Character do local w; for _, v in pairs(Workspace:GetDescendants()) do if v:IsA("BasePart") and (v.Name:lower():find("water") or v.Name:lower():find("wavetile")) then w = v; break end end; if w then workspace.GameEvents.addThirst:FireServer(w, w.Position); task.wait(0.1) else task.wait(2) end; task.wait() end; autoWaterTask = nil end

local function StartAutoDNAFarm() isAutoDNAActive = true; Rayfield:Notify({Title = "Auto DNA Farm", Content = "Iniciando...", Duration = 3}); local c = LocalPlayer.Character; if not c or not c:FindFirstChild("Humanoid") then Rayfield:Notify({Title = "Erro", Content = "Personagem não disponível."}); isAutoDNAActive = false; return end; local h = c.Humanoid; originalWalkSpeed = h.WalkSpeed; h.WalkSpeed = AUTO_WALK_SPEED; h.JumpPower = 0; h.AutoRotate = false; isAutoEatActive = true; autoEatTask = task.spawn(AutoEatLoop); isAutoWaterActive = true; autoWaterTask = task.spawn(AutoWaterLoop); Rayfield:Notify({Title = "Auto DNA Farm", Content = "Caminhando para local seguro...", Duration = 4}); autoDNATask = task.spawn(function() while isAutoDNAActive and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do local hrp = LocalPlayer.Character.HumanoidRootPart; if (hrp.Position - SAFE_DNA_FARM_LOCATION).Magnitude > 5 then h:MoveTo(SAFE_DNA_FARM_LOCATION) end; task.wait(2) end; StopAutoDNAFarm() end) end
local function StopAutoDNAFarm() isAutoDNAActive = false; if autoDNATask then task.cancel(autoDNATask); autoDNATask = nil end; isAutoEatActive = false; if autoEatTask then task.cancel(autoEatTask); autoEatTask = nil end; isAutoWaterActive = false; if autoWaterTask then task.cancel(autoWaterTask); autoWaterTask = nil end; RestoreHumanoidProperties(); Rayfield:Notify({Title = "Auto DNA Farm", Content = "Parado.", Duration = 3}) end

local function StartAutoCollectAmber() isAutoCollectActive = true; local c = LocalPlayer.Character; if not c or not c:FindFirstChild("Humanoid") then Rayfield:Notify({Title = "Erro", Content = "Personagem não disponível."}); isAutoCollectActive = false; return end; local h = c.Humanoid; originalWalkSpeed = h.WalkSpeed; h.WalkSpeed = AUTO_WALK_SPEED; h.JumpPower = 0; h.AutoRotate = false; Rayfield:Notify({Title = "Auto Collect Amber", Content = "Iniciado...", Duration = 3}); autoCollectTask = task.spawn(function() if not ESPAmberEnabled then Rayfield:SetToggle("ESP", "ESP Amber (com distância)", true); ESPAmberEnabled = true; SetupAmberListeners() end; ScanAndApplyESPAmber(); task.wait(0.2); while isAutoCollectActive and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") do local hrp = LocalPlayer.Character.HumanoidRootPart; local ca, md = nil, math.huge; for _, ap in pairs(ESPObjects) do if ap and ap:IsDescendantOf(Workspace) then local d = (ap.Position - hrp.Position).Magnitude; if d < md then md, ca = d, ap end end end; if ca then h:MoveTo(ca.Position); h.MoveToFinished:Wait(10); task.wait(0.25) else task.wait(3) end end; RestoreHumanoidProperties(); isAutoCollectActive = false end) end
local function StopAutoCollectAmber() isAutoCollectActive = false; if autoCollectTask then task.cancel(autoCollectTask); autoCollectTask = nil end; RestoreHumanoidProperties(); Rayfield:Notify({Title = "Auto Collect Amber", Content = "Parado.", Duration = 3}) end

-- *** NOVAS FUNÇÕES: AUTO DAMAGE ***
local function AutoDamageLoop()
    while isAutoDamageActive do
        workspace.GameEvents.Damage:FireServer()
        task.wait(0.1) -- Delay pequeno para spam rápido
    end
    autoDamageTask = nil
end

local function AutoAOEDamageLoop()
    while isAutoAOEDamageActive do
        workspace.GameEvents.AOEDamage:FireServer()
        task.wait(0.1) -- Delay pequeno para spam rápido
    end
    autoAOEDamageTask = nil
end


-- === Configuração do Rayfield ===
local ESPTab = Window:CreateTab("ESP")
ESPTab:CreateToggle({Name = "ESP Amber (com distância)", CurrentValue = false, Callback = function(Value) ESPAmberEnabled = Value; if ESPAmberEnabled then ScanAndApplyESPAmber(); SetupAmberListeners() else DisconnectAmberListeners(); ClearAllESPAmber() end end})
ESPTab:CreateToggle({Name = "Auto Collect Amber", CurrentValue = false, Callback = function(Value) if Value then if isAutoDNAActive then StopAutoDNAFarm(); Rayfield:SetToggle("Farm", "Auto DNA Farm (Caminhada Rápida)", false) end; StartAutoCollectAmber() else StopAutoCollectAmber() end end})

local FarmTab = Window:CreateTab("Farm")
FarmTab:CreateToggle({Name = "Auto Eat", CurrentValue = false, Callback = function(Value) if isAutoDNAActive then Rayfield:SetToggle(FarmTab, "Auto Eat", true); return end; isAutoEatActive = Value; if Value then autoEatTask = task.spawn(AutoEatLoop) elseif autoEatTask then task.cancel(autoEatTask); autoEatTask = nil end end})
FarmTab:CreateToggle({Name = "Auto Water", CurrentValue = false, Callback = function(Value) if isAutoDNAActive then Rayfield:SetToggle(FarmTab, "Auto Water", true); return end; isAutoWaterActive = Value; if Value then autoWaterTask = task.spawn(AutoWaterLoop) elseif autoWaterTask then task.cancel(autoWaterTask); autoWaterTask = nil end end})
FarmTab:CreateToggle({Name = "Auto DNA Farm (Caminhada Rápida)", CurrentValue = false, Callback = function(Value) if Value then if isAutoCollectActive then StopAutoCollectAmber(); Rayfield:SetToggle("ESP", "Auto Collect Amber", false) end; StartAutoDNAFarm(); Rayfield:SetToggle(FarmTab, "Auto Eat", true); Rayfield:SetToggle(FarmTab, "Auto Water", true) else StopAutoDNAFarm(); Rayfield:SetToggle(FarmTab, "Auto Eat", false); Rayfield:SetToggle(FarmTab, "Auto Water", false) end end})

-- *** NOVA ABA: DAMAGE ***
local DamageTab = Window:CreateTab("Damage")

DamageTab:CreateToggle({
    Name = "Auto Damage (Loop)",
    CurrentValue = false,
    Callback = function(Value)
        isAutoDamageActive = Value
        if Value then
            Rayfield:Notify({Title = "Auto Damage", Content = "Ativado.", Duration = 2})
            autoDamageTask = task.spawn(AutoDamageLoop)
        else
            Rayfield:Notify({Title = "Auto Damage", Content = "Desativado.", Duration = 2})
            if autoDamageTask then
                task.cancel(autoDamageTask)
                autoDamageTask = nil
            end
        end
    end
})

DamageTab:CreateToggle({
    Name = "Auto AOE Damage (Loop)",
    CurrentValue = false,
    Callback = function(Value)
        isAutoAOEDamageActive = Value
        if Value then
            Rayfield:Notify({Title = "Auto AOE Damage", Content = "Ativado.", Duration = 2})
            autoAOEDamageTask = task.spawn(AutoAOEDamageLoop)
        else
            Rayfield:Notify({Title = "Auto AOE Damage", Content = "Desativado.", Duration = 2})
            if autoAOEDamageTask then
                task.cancel(autoAOEDamageTask)
                autoAOEDamageTask = nil
            end
        end
    end
})
