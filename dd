-- Slender Hub Premium Key System (Enhanced Persistence, Reset, Timer & Debugging - FILE EXTENSION FIX)
-- Developed for Slender

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Dependency: Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Configuration File Path (using standard file system)
local CONFIG_FOLDER = "SlenderHubPremiumSystem" -- Folder name for saved data
local CONFIG_FILE = "PremiumKey_" .. LocalPlayer.UserId .. ".rayfield" -- FIX: Changed to .rayfield extension
local CONFIG_PATH = CONFIG_FOLDER .. "/" .. CONFIG_FILE

-- Valid keys - PLEASE ENSURE THESE ARE EXACTLY AS INTENDED!
local keys = {
    Lifetime = {
        Key = "LifeTimeF4K9L2P7V8JDHUtY", -- Double-check this key
        Duration = math.huge -- Infinite duration
    },
    Monthly = {
        Key = "MonthlyKey0KJu7iYU2HJUTRFYXV", -- Double-check this key
        Duration = 2592000 -- 30 days in seconds (30 * 24 * 60 * 60)
    },
    SevenDays = {
        Key = "7diasrrtghrtyuOj934Tg", -- Double-check this key
        Duration = 604800 -- 7 days in seconds (7 * 24 * 60 * 60)
    }
}

local currentTime = os.time()
local keyValid = false -- Default to false
local loadedConfigData = nil -- Store the loaded config for timer checks

-- Function to load saved key configuration
local function loadKeyConfig()
    print("--- Loading Key Configuration ---")
    if isfile(CONFIG_PATH) then
        print("Found config file at:", CONFIG_PATH)
        local dataString = readfile(CONFIG_PATH)
        local data = HttpService:JSONDecode(dataString)

        if data and data.KeyType and data.Timestamp then
            local savedKeyType = data.KeyType
            local savedTimestamp = data.Timestamp
            print("Loaded data - KeyType:", savedKeyType, " Timestamp:", savedTimestamp)

            if keys[savedKeyType] then -- Check if the saved key type is defined
                if keys[savedKeyType].Duration == math.huge then -- Lifetime key
                    print("Lifetime key detected in saved config. Valid!")
                    loadedConfigData = data -- Store valid config
                    return true -- Key is valid
                elseif (currentTime - savedTimestamp < keys[savedKeyType].Duration) then
                    local remainingTime = keys[savedType].Duration - (currentTime - savedTimestamp)
                    print("Timed key '" .. savedKeyType .. "' still active. Remaining seconds:", remainingTime)
                    loadedConfigData = data -- Store valid config
                    return true -- Key is valid
                else
                    print("Timed key '" .. savedKeyType .. "' HAS EXPIRED.")
                    Rayfield:Notify({
                        Title = "⚠ Your Key Expired!",
                        Content = "Please enter a new key to continue using Premium features.",
                        Duration = 7
                    })
                    pcall(function() deletefile(CONFIG_PATH) end) -- Delete expired file
                end
            else
                print("ERROR: Saved key type '" .. savedKeyType .. "' not found in current script definitions. Clearing old config.")
                Rayfield:Notify({
                    Title = "⚠ Saved Key Error!",
                    Content = "Your saved key type is no longer recognized. Please re-enter a valid key.",
                    Duration = 7
                })
                pcall(function() deletefile(CONFIG_PATH) end) -- Attempt to delete old invalid file
            end
        else
            print("Invalid or incomplete data in config file. Deleting old file.")
            pcall(function() deletefile(CONFIG_PATH) end) -- Attempt to delete corrupted file
        end
    else
        print("No config file found. First time or cleared.")
    end
    print("--- End Loading Key Configuration ---")
    return false -- Key is not valid
end

-- Function to save key configuration
local function saveKeyConfig(keyType, timestamp)
    print("--- Saving Key Configuration ---")
    if not isfolder(CONFIG_FOLDER) then
        makefolder(CONFIG_FOLDER)
        print("Created folder:", CONFIG_FOLDER)
    end
    local data = {
        KeyType = keyType,
        Timestamp = timestamp
    }
    local jsonData = HttpService:JSONEncode(data)
    writefile(CONFIG_PATH, jsonData)
    loadedConfigData = data -- Update loaded config data
    print("Saved KeyType:", keyType, " Timestamp:", timestamp, " to:", CONFIG_PATH)
    print("--- End Saving Key Configuration ---")
end

-- Main Window Initialization
local Window = Rayfield:CreateWindow({
    Name = "Slender Hub | Premium Key System",
    LoadingTitle = "Slender Hub",
    LoadingSubtitle = "Premium Key Validation",
    ConfigurationSaving = {
        Enabled = false -- CRITICAL: Disable Rayfield's built-in saving for this window
    }
})

local KeyTab = Window:CreateTab("🔑 Premium Key", 4483362458)

-- References to UI elements for dynamic visibility control
local keyInputParagraph, copyKeyLinkButton, keyInputField
local keyValidatedParagraph
local accessScriptButton, resetKeyButton, showKeyTimerButton, getMorePremiumKeysButton -- Declare here for wider scope

-- Function to update the UI state (show/hide elements)
local function updateUIState(isValid)
    -- Hide/Show elements based on keyValid state
    if keyInputParagraph then keyInputParagraph.Visible = not isValid end
    if keyInputField then keyInputField.Visible = not isValid end

    if keyValidatedParagraph then keyValidatedParagraph.Visible = isValid end

    -- Access Script, Reset Key, Show Key Timer, Get More Premium Keys buttons are always visible,
    -- but Access Script is enabled/disabled based on keyValid.
    if accessScriptButton then accessScriptButton:Set("Enabled", isValid) end
end

-- Create all UI elements initially
keyInputParagraph = KeyTab:CreateParagraph({
    Title = "Access Slender Hub Premium",
    Content = "Enter your key below and click 'Access Premium'."
})

keyInputField = KeyTab:CreateInput({
    Name = "📝 Enter your Premium Key",
    PlaceholderText = "Ex: K9L2P7V8JDHUtY",
    RemoveTextAfterFocusLost = false,
    Callback = function(rawInput)
        local input = rawInput:gsub("%s", "") -- Remove all whitespace
        print("Input received:", rawInput)
        print("Cleaned input (no spaces):", input)

        local keyMatchedType = nil -- Stores the type of key that matched
        
        -- Check each key type
        for typeName, keyData in pairs(keys) do
            if input == keyData.Key then
                keyMatchedType = typeName
                break -- Found a match, exit loop
            end
        end

        if keyMatchedType then
            keyValid = true
            saveKeyConfig(keyMatchedType, os.time())
            Rayfield:Notify({
                Title = "✅ Key Accepted!",
                Content = "Click 'Access Premium' to continue.",
                Duration = 5
            })
            print(keyMatchedType .. " key matched and saved.")
            updateUIState(true) -- Update UI to show valid state
        else
            Rayfield:Notify({
                Title = "❌ Invalid Key",
                Content = "Please check your key and try again.",
                Duration = 6
            })
            print("No key matched. 'keyValid' remains:", keyValid)
            updateUIState(false) -- Ensure UI shows invalid state if it wasn't valid before
        end
    end
})

keyValidatedParagraph = KeyTab:CreateParagraph({
    Title = "✅ Key Validated",
    Content = "Your Premium key is active. Click 'Access Premium' to launch the hub."
})

-- Function to reset the key
local function resetKey()
    print("--- Resetting Key ---")
    pcall(function() deletefile(CONFIG_PATH) end) -- Attempt to delete the file
    keyValid = false
    loadedConfigData = nil -- Clear loaded config data
    Rayfield:Notify({
        Title = "🔑 Key Reset!",
        Content = "Your key has been cleared. Please enter a new key.",
        Duration = 5
    })
    print("Key reset completed. Setting UI to invalid state.")
    updateUIState(false) -- Update UI to show key input field
end

-- Function to show key timer
local function showKeyTimer()
    print("--- Showing Key Timer ---")
    if not keyValid or not loadedConfigData then
        Rayfield:Notify({ Title = "No Active Key", Content = "Please enter a valid key first.", Duration = 5 })
        print("Cannot show timer: no valid key active or data missing.")
        return
    end

    local savedKeyType = loadedConfigData.KeyType
    local savedTimestamp = loadedConfigData.Timestamp
    local keyData = keys[savedKeyType]

    if not keyData then
        Rayfield:Notify({ Title = "Error", Content = "Unknown key type saved. Please reset key.", Duration = 5 })
        print("Error: Unknown key type in loaded config. Initiating reset.")
        resetKey() -- Force reset if saved key type is unknown
        return
    end

    if keyData.Duration == math.huge then
        Rayfield:Notify({ Title = "Key Status", Content = "Your key is LIFETIME!", Duration = 5 })
        print("Key is Lifetime. No timer needed.")
    else
        local elapsed = os.time() - savedTimestamp
        local remaining = keyData.Duration - elapsed
        
        if remaining <= 0 then
            Rayfield:Notify({ Title = "Key Status", Content = "Your key has EXPIRED!", Duration = 5 })
            print("Key has expired. Initiating reset.")
            resetKey() -- Auto-reset expired key
            return
        end

        local days = math.floor(remaining / 86400) -- 24*60*60
        remaining = remaining % 86400
        local hours = math.floor(remaining / 3600)
        remaining = remaining % 3600
    local minutes = math.floor(remaining / 60)
    local seconds = remaining % 60

        local message = string.format("Time Left: %d days, %d hours, %d minutes, %d seconds", days, hours, minutes, seconds)
        Rayfield:Notify({ Title = "Key Status", Content = message, Duration = 7 })
        print("Timer: " .. message)
    end
end

-- Add Get More Premium Keys Button (always visible)
getMorePremiumKeysButton = KeyTab:CreateButton({
    Name = "🔑 Get More Premium Keys",
    Callback = function()
        -- Direct to your Discord where users can manage/buy keys
        setclipboard("https://discord.gg/zFQMEvT6") -- This is the Discord invite from your previous scripts
        Rayfield:Notify({
            Title = "Discord Link Copied!",
            Content = "Join our Discord for Premium key purchases & support.",
            Duration = 8
        })
    end
})

-- Add Reset Key Button
resetKeyButton = KeyTab:CreateButton({
    Name = "🔄 Reset Key",
    Callback = resetKey
})

-- Add Show Key Timer Button
showKeyTimerButton = KeyTab:CreateButton({
    Name = "⏱ Show Key Timer",
    Callback = showKeyTimer
})

-- Add Access Script Button
accessScriptButton = KeyTab:CreateButton({
    Name = "🚀 Access Premium",
    Callback = function()
        print("Access Premium button clicked. Current 'keyValid' state:", keyValid)
        if keyValid then
            -- Destroy the key system window and load the main Premium script
            spawn(function()
                Rayfield:Destroy()
                task.wait(1)
                -- IMPORTANT: Replace this URL with the actual URL of your main Premium script
                loadstring(game:HttpGet("https://raw.githubusercontent.com/SlenderYt567/sc/refs/heads/main/kk"))()
            end)
        else
            Rayfield:Notify({
                Title = "⚠ Key Not Validated",
                Content = "You must enter a valid key first.",
                Duration = 5
            })
        end
    end
})

-- Perform initial key validation when the script starts
keyValid = loadKeyConfig()
print("Final 'keyValid' state after initial load:", keyValid)
updateUIState(keyValid) -- Set initial UI state based on loaded key validity
