--[[
    Slender Hub - Unified Key System (Free + Premium)
    Developed by Gemini for Slender
    Version 3.2: Added Webhook Integration for Key Logging
]]

--//==============================[ SERVICES & DEPENDENCIES ]==============================//--
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Webhook logging (logs key usage)
local function sendWebhookLog(keyType, keyIdentifier)
    local success, result = pcall(function()
        local data = {
            content = string.format("üîê **Key Used**\nType: `%s`\nKey: `%s`\nUser: `%s` (ID: `%d`)", keyType, keyIdentifier, LocalPlayer.Name, LocalPlayer.UserId)
        }

        local payload = HttpService:JSONEncode(data)
        local requestFunc = (syn and syn.request) or (http and http.request) or (http_request) or (request)

        if requestFunc then
            requestFunc({
                Url = "https://discord.com/api/webhooks/1398723880369131631/7knZsAymoHblk9BcsXYuI7XT2-8PNHkZJfFbtyLHssHqjW_pXeBQVznZ0lDHz7G9ObRI",
                Method = "POST",
                Headers = {["Content-Type"] = "application/json"},
                Body = payload
            })
        else
            warn("‚ö† Webhook failed: No supported HTTP request function found.")
        end
    end)

    if not success then
        warn("‚ö† Failed to send webhook log:", result)
    end
end

--//==============================[ CONFIG ]==============================//--
local CONFIG_FOLDER = "SlenderHubUnified"
local CONFIG_FILE = "KeyData_" .. LocalPlayer.UserId .. ".json"
local CONFIG_PATH = CONFIG_FOLDER .. "/" .. CONFIG_FILE

local FREE_SCRIPT_URL = "https://raw.githubusercontent.com/SlenderYt567/sc/refs/heads/main/.gitignore"
local PREMIUM_SCRIPT_URL = "https://raw.githubusercontent.com/SlenderYt567/sc/refs/heads/main/kk"

local PREMIUM_KEYS = {
    Lifetime = { Key = "LifeTimeF4K9L2P7V8JDHUtY", Duration = math.huge },
    Monthly = { Key = "MonthlyKey0KJu7iYU2HJUTRFYXV", Duration = 2592000 },
    SevenDays = { Key = "7diasrrtghrtyuOj934Tg", Duration = 604800 }
}

local FREE_KEY_DURATION = 86400
local VALID_FREE_KEYS = {
    "P8Z1V6KD4XYL", "J3M9Q2HF7CRS", "T7WN4YEK2LUV", "B6QX5JZH8GMD", "L9HR2KCV5TNE",
    "X4CY3LQF9TWM", "U1ZR6EHD5PKN", "E8MW7JKL3YTB", "K2FG5QXL9RHC", "Y7AD3EVN6MPL",
    "M9VT1XKD4QHE", "C4BR7YEL8NGQ", "R2WQ5JHZ6KMC", "Z3XF8KVL1DPN", "A7KT9QWE5YLM",
    "V5HG4ELD3XRN", "F6MQ1JVC9PTY", "N9LR2XEH5GWD", "S3PY8VKF4QML", "G1XC7LWE2RTZ",
    "D2VH9EKM5LYP", "W4YN3QFL8HCT", "Q8PM6JKX1RDV", "H9TL5ECZ7KMW", "O3FX2YRL6BPN",
    "U5MA7JQK9VHD", "L8NR1EKZ3PXT", "T2YG4CVM5HLQ", "E7WX9LKP1MFD", "K6ZH3QVE8YNR",
    "M4RC2JKL5XWH", "N1PY6EVZ9TQD", "S8FD3KXM7LWR", "B3LH9YQK2TVM", "Z7KM5EWC1LRP",
    "F9TN2XHL8YQD", "Y6MQ4JVE5KRP", "R5LC7KPN2HWX", "D8XE9YVL3FQT", "C6HR2EJW5LMP",
    "V1ZG8KQC9YTW", "H4PN3XKM7ELD", "A9WM5EVR2KLT", "O7QT1YHZ6CLM", "X5LC9FKD3MPQ",
    "G3KN7QXE1YVD", "W2ZH8KRP5LMF", "J6VL9EMT4QPY", "T1RF7XKL3DWC", "L4MQ5KYE2HPN"
}

local PREMIUM_KEYS_LOOKUP, VALID_FREE_KEYS_SET = {}, {}
for typeName, data in pairs(PREMIUM_KEYS) do
    PREMIUM_KEYS_LOOKUP[data.Key] = typeName
end
for _, key in ipairs(VALID_FREE_KEYS) do
    VALID_FREE_KEYS_SET[key] = true
end

--//==============================[ STATE & UTILS ]==============================//--
local keyValid, activeKeyClass, activeKeyIdentifier, loadedConfigData = false

local function saveKeyConfig(keyClass, keyIdentifier, timestamp)
    if not isfolder(CONFIG_FOLDER) then
        makefolder(CONFIG_FOLDER)
    end
    local data = {
        KeyClass = keyClass,
        KeyIdentifier = keyIdentifier,
        Timestamp = timestamp
    }
    writefile(CONFIG_PATH, HttpService:JSONEncode(data))
    loadedConfigData = data
    keyValid = true
    activeKeyClass = keyClass
    activeKeyIdentifier = keyIdentifier
end

local function loadKeyConfig()
    if not isfile(CONFIG_PATH) then
        return false
    end

    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(CONFIG_PATH))
    end)

    if not (success and data and data.KeyClass and data.KeyIdentifier and data.Timestamp) then
        pcall(deletefile, CONFIG_PATH)
        return false
    end

    local currentTime = os.time()
    local valid = false
    local duration = 0

    if data.KeyClass == "Premium" then
        local info = PREMIUM_KEYS[data.KeyIdentifier]
        if info then
            duration = info.Duration
            valid = (duration == math.huge) or (currentTime - data.Timestamp < duration)
        end
    elseif data.KeyClass == "Free" and VALID_FREE_KEYS_SET[data.KeyIdentifier] then
        duration = FREE_KEY_DURATION
        valid = (currentTime - data.Timestamp < FREE_KEY_DURATION)
    end

    if valid then
        loadedConfigData = data
        activeKeyClass = data.KeyClass
        activeKeyIdentifier = data.KeyIdentifier
        return true
    else
        pcall(deletefile, CONFIG_PATH)
        Rayfield:Notify({Title = "‚ö† Key Expired", Content = "Your previous key has expired. Please enter a new one.", Duration = 7})
        return false
    end
end

local function resetKey()
    pcall(deletefile, CONFIG_PATH)
    keyValid = false
    activeKeyClass = nil
    activeKeyIdentifier = nil
    loadedConfigData = nil
    Rayfield:Notify({Title = "üîë Key Reset!", Content = "Your key has been cleared. Please enter a new one.", Duration = 5})
    updateUIState(false)
end

--//==============================[ UI ]==============================//--
local Window = Rayfield:CreateWindow({
    Name = "Slender Hub | Unified Key System",
    LoadingTitle = "Slender Hub",
    LoadingSubtitle = "Validating Access...",
    ConfigurationSaving = { Enabled = false }
})

local KeyTab = Window:CreateTab("üîë Access", 4483362458)
local keyInputSection, validatedSection, accessScriptButton

function updateUIState(isValid)
    keyInputSection.Visible = not isValid
    validatedSection.Visible = isValid
    accessScriptButton:Set("Enabled", isValid)

    if isValid then
        validatedSection:Set("Title", activeKeyClass == "Premium" and "‚úÖ Premium Access Validated" or "‚úÖ Free Access Validated")
        validatedSection:Set("Content", activeKeyClass == "Premium"
            and "Your Premium key is active. Click 'name' below to launch."
            or "Your Free key is active for 24h. Click 'name' below to launch.")
    end
end

keyInputSection = KeyTab:CreateSection("Enter Your Key")

KeyTab:CreateParagraph({
    Parent = keyInputSection,
    Title = "How to get Access",
    Content = "Enter your Free or Premium key below. To get a key, use the buttons."
})

KeyTab:CreateButton({
    Parent = keyInputSection,
    Name = "üìã Copy Free Key Link (24h)",
    Callback = function()
        setclipboard("https://lootdest.org/s?AOAvAyEV")
        Rayfield:Notify({Title = "Link Copied!", Content = "Paste in browser to get a Free Key.", Duration = 6})
    end
})

KeyTab:CreateButton({
    Parent = keyInputSection,
    Name = "‚ú® Get Premium Access (Discord)",
    Callback = function()
        setclipboard("https://discord.gg/zFQMEvT6")
        Rayfield:Notify({Title = "Discord Link Copied!", Content = "Join our Discord for Premium!", Duration = 8})
    end
})

KeyTab:CreateInput({
    Parent = keyInputSection,
    Name = "üîë Enter Key Here",
    PlaceholderText = "Paste your Free or Premium key",
    RemoveTextAfterFocusLost = false,
    Callback = function(rawInput)
        local input = rawInput:gsub("%s", ""):gsub("\n", "")

        local premiumType = PREMIUM_KEYS_LOOKUP[input]
        if premiumType then
            saveKeyConfig("Premium", premiumType, os.time())
            sendWebhookLog("Premium", premiumType)
            Rayfield:Notify({Title = "‚úÖ Premium Key Accepted!", Content = "Access granted. Click 'name' to continue.", Duration = 6})
            updateUIState(true)
            return
        end

        if VALID_FREE_KEYS_SET[input] then
            saveKeyConfig("Free", input, os.time())
            sendWebhookLog("Free", input)
            Rayfield:Notify({Title = "‚úÖ Free Key Accepted!", Content = "Access granted for 24 hours. Click 'name' to continue.", Duration = 6})
            updateUIState(true)
            return
        end

        Rayfield:Notify({Title = "‚ùå Invalid Key", Content = "The key you entered is not valid. Please try again.", Duration = 5})
        updateUIState(false)
    end
})

validatedSection = KeyTab:CreateParagraph({
    Title = "‚úÖ Key Validated",
    Content = "You have an active key. Click 'name' below to launch the hub."
})

KeyTab:CreateButton({ Name = "üîÑ Reset Key", Callback = resetKey })

KeyTab:CreateButton({
    Name = "‚è± Show Key Timer",
    Callback = function()
        if not keyValid or not loadedConfigData then
            Rayfield:Notify({Title = "No Active Key", Content = "Please enter a valid key first.", Duration = 5})
            return
        end

        local saved = loadedConfigData.Timestamp
        local dur = (activeKeyClass == "Premium") and PREMIUM_KEYS[activeKeyIdentifier].Duration or FREE_KEY_DURATION
        if dur == math.huge then
            Rayfield:Notify({Title = "Key Status", Content = "Your Premium key is LIFETIME!", Duration = 8})
            return
        end

        local left = dur - (os.time() - saved)
        if left <= 0 then return resetKey() end

        local d = math.floor(left / 86400)
        left %= 86400
        local h = math.floor(left / 3600)
        left %= 3600
        local m = math.floor(left / 60)

        local msg = string.format("%s Time Left: %d D, %d H, %d M", activeKeyClass, d, h, m)
        Rayfield:Notify({Title = "Key Status", Content = msg, Duration = 8})
    end
})

accessScriptButton = KeyTab:CreateButton({
    Name = "name", -- bot√£o renomeado
    Callback = function()
        if not keyValid then
            Rayfield:Notify({Title = "‚ö† Access Denied", Content = "Please enter a valid key first.", Duration = 5})
            return
        end

        local scriptUrl = (activeKeyClass == "Premium") and PREMIUM_SCRIPT_URL or FREE_SCRIPT_URL
        Rayfield:Destroy()
        task.wait(0.5)
        loadstring(game:HttpGet(scriptUrl))()
    end
})

--//==============================[ INIT ]==============================//--
keyValid = loadKeyConfig()
updateUIState(keyValid)
print("‚úÖ Slender Hub Unified Key System Ready")
