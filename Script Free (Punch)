--// Slender Hub - Free Key System (Enhanced Persistence & Dynamic UI with Multi-Key Support)
--// Developed by Gemini for Slender
--// Version 2.0: Implemented multi-key list and optimized validation logic.

-- Services
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Dependency: Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

-- Configuration File Path (using standard file system)
local CONFIG_FOLDER = "SlenderHubFreeSystem" -- Unique folder for Free version
local CONFIG_FILE = "FreeKey_" .. LocalPlayer.UserId .. ".rayfield" -- Unique file name
local CONFIG_PATH = CONFIG_FOLDER .. "/" .. CONFIG_FILE

--[[================================================================================
    KEY CONFIGURATION
    - All valid keys are listed here.
    - The system will accept any key from this list.
================================================================================]]--
local VALID_KEYS = {
    "P8Z1V6KD4XYL", "J3M9Q2HF7CRS", "T7WN4YEK2LUV", "B6QX5JZH8GMD", "L9HR2KCV5TNE",
    "X4CY3LQF9TWM", "U1ZR6EHD5PKN", "E8MW7JKL3YTB", "K2FG5QXL9RHC", "Y7AD3EVN6MPL",
    "M9VT1XKD4QHE", "C4BR7YEL8NGQ", "R2WQ5JHZ6KMC", "Z3XF8KVL1DPN", "A7KT9QWE5YLM",
    "V5HG4ELD3XRN", "F6MQ1JVC9PTY", "N9LR2XEH5GWD", "S3PY8VKF4QML", "G1XC7LWE2RTZ",
    "D2VH9EKM5LYP", "W4YN3QFL8HCT", "Q8PM6JKX1RDV", "H9TL5ECZ7KMW", "O3FX2YRL6BPN",
    "U5MA7JQK9VHD", "L8NR1EKZ3PXT", "T2YG4CVM5HLQ", "E7WX9LKP1MFD", "K6ZH3QVE8YNR",
    "M4RC2JKL5XWH", "N1PY6EVZ9TQD", "S8FD3KXM7LWR", "B3LH9YQK2TVM", "Z7KM5EWC1LRP",
    "F9TN2XHL8YQD", "Y6MQ4JVE5KRP", "R5LC7KPN2HWX", "D8XE9YVL3FQT", "C6HR2EJW5LMP",
    "V1ZG8KQC9YTW", "H4PN3XKM7ELD", "A9WM5EVR2KLT", "O7QT1YHZ6CLM", "X5LC9FKD3MPQ",
    "G3KN7QXE1YVD", "W2ZH8KRP5LMF", "J6VL9EMT4QPY", "T1RF7XKL3DWC", "L4MQ5KYE2HPN"
}

-- Create a lookup table (set) for instant O(1) key validation. This is much faster than iterating the list.
local VALID_KEYS_SET = {}
for _, key in ipairs(VALID_KEYS) do
    VALID_KEYS_SET[key] = true
end

-- Key Duration and State
local KEY_DURATION = 86400 -- 24 hours in seconds
local currentTime = os.time()
local keyValid = false
local loadedConfigData = nil -- Store the loaded config for timer checks

-- Function to load saved key configuration
local function loadKeyConfig()
    print("--- Free Key System: Loading Key Configuration ---")
    if isfile(CONFIG_PATH) then
        print("Found config file at:", CONFIG_PATH)
        local dataString = readfile(CONFIG_PATH)
        local success, data = pcall(function() return HttpService:JSONDecode(dataString) end)

        -- Check if JSON decoding was successful and if the saved key is still in our valid list
        if success and data and data.Key and data.Timestamp and VALID_KEYS_SET[data.Key] then
            local savedTimestamp = data.Timestamp
            print("Loaded data - Key:", data.Key, " Timestamp:", savedTimestamp)

            if (currentTime - savedTimestamp < KEY_DURATION) then
                local remainingTime = KEY_DURATION - (currentTime - savedTimestamp)
                print("Key is still active. Remaining seconds:", remainingTime)
                loadedConfigData = data -- Store valid config
                return true -- Key is valid
            else
                print("Key HAS EXPIRED.")
                Rayfield:Notify({
                    Title = "⚠ Your Free Key Expired!",
                    Content = "Please enter a new key to continue using Free features.",
                    Duration = 7
                })
                pcall(function() deletefile(CONFIG_PATH) end) -- Delete expired file
            end
        else
            print("Invalid, unrecognized, removed, or corrupted data in config file. Deleting old file.")
            Rayfield:Notify({
                Title = "⚠ Saved Key Error!",
                Content = "Your saved key is invalid or has been removed. Please re-enter a valid key.",
                Duration = 7
            })
            pcall(function() deletefile(CONFIG_PATH) end) -- Attempt to delete old invalid file
        end
    else
        print("No config file found. First time or cleared.")
    end
    print("--- Free Key System: End Loading Key Configuration ---")
    return false -- Key is not valid
end

-- Function to save key configuration
local function saveKeyConfig(keyToSave, timestamp)
    print("--- Free Key System: Saving Key Configuration ---")
    if not isfolder(CONFIG_FOLDER) then
        makefolder(CONFIG_FOLDER)
        print("Created folder:", CONFIG_FOLDER)
    end
    local data = {
        Key = keyToSave,
        Timestamp = timestamp
    }
    local jsonData = HttpService:JSONEncode(data)
    writefile(CONFIG_PATH, jsonData)
    loadedConfigData = data -- Update loaded config data
    print("Saved Key:", keyToSave, " Timestamp:", timestamp, " to:", CONFIG_PATH)
    print("--- Free Key System: End Saving Key Configuration ---")
end

-- Main Window Initialization
local Window = Rayfield:CreateWindow({
    Name = "Slender Hub | Free Key System",
    LoadingTitle = "Slender Hub",
    LoadingSubtitle = "Free Key Validation",
    ConfigurationSaving = {
        Enabled = false -- CRITICAL: Disable Rayfield's built-in saving for this window
    }
})

local KeyTab = Window:CreateTab("🔑 Key System", 4483362458)

-- References to UI elements for dynamic visibility control
local howToParagraph, copyKeyLinkButton, keyInputField
local keyValidatedParagraph
local accessScriptButton, resetKeyButton, showKeyTimerButton, buyPremiumButton

-- Function to update the UI state (show/hide elements)
local function updateUIState(isValid)
    if howToParagraph then howToParagraph.Visible = not isValid end
    if copyKeyLinkButton then copyKeyLinkButton.Visible = not isValid end
    if keyInputField then keyInputField.Visible = not isValid end
    if keyValidatedParagraph then keyValidatedParagraph.Visible = isValid end
    if accessScriptButton then accessScriptButton:Set("Enabled", isValid) end
end

-- Create all UI elements initially
howToParagraph = KeyTab:CreateParagraph({
    Title = "How to get your Free Key",
    Content = "Click the button below to copy the key page. The Premium version is on our Discord."
})

copyKeyLinkButton = KeyTab:CreateButton({
    Name = "📋 Copy Free Key Link (24h)",
    Callback = function()
        setclipboard("https://lootdest.org/s?AOAvAyEV")
        Rayfield:Notify({
            Title = "Link Copied!",
            Content = "Paste in browser to get your Free Key.",
            Duration = 6
        })
    end
})

keyInputField = KeyTab:CreateInput({
    Name = "📝 Enter Your Key",
    PlaceholderText = "Ex: P8Z1V6KD4XYL",
    RemoveTextAfterFocusLost = false,
    Callback = function(rawInput)
        local input = rawInput:gsub("%s", "") -- Remove all whitespace
        print("Cleaned input:", input)

        if VALID_KEYS_SET[input] then -- Check if the cleaned key exists in our lookup table
            keyValid = true
            -- CRITICAL FIX: Save the actual key the user entered, not a static variable
            saveKeyConfig(input, os.time())
            Rayfield:Notify({
                Title = "✅ Key Accepted!",
                Content = "Click 'Access Script' to continue.",
                Duration = 5
            })
            print("Key matched and saved.")
            updateUIState(true)
        else
            Rayfield:Notify({
                Title = "❌ Invalid Key",
                Content = "Please try again.",
                Duration = 5
            })
            print("No key matched. 'keyValid' remains:", keyValid)
            updateUIState(false)
        end
    end
})

keyValidatedParagraph = KeyTab:CreateParagraph({
    Title = "✅ Key Validated",
    Content = "You already used a valid key in the last 24h. Click 'Access Script' to launch the hub."
})

-- Function to reset the key
local function resetKey()
    print("--- Free Key System: Resetting Key ---")
    pcall(function() deletefile(CONFIG_PATH) end)
    keyValid = false
    loadedConfigData = nil
    Rayfield:Notify({
        Title = "🔑 Key Reset!",
        Content = "Your key has been cleared. Please enter a new key.",
        Duration = 5
    })
    print("Key reset completed.")
    updateUIState(false)
end

-- Function to show key timer
local function showKeyTimer()
    print("--- Free Key System: Showing Key Timer ---")
    if not keyValid or not loadedConfigData then
        Rayfield:Notify({ Title = "No Active Key", Content = "Please enter a valid key first.", Duration = 5 })
        return
    end

    local savedTimestamp = loadedConfigData.Timestamp
    local elapsed = os.time() - savedTimestamp
    local remaining = KEY_DURATION - elapsed
    
    if remaining <= 0 then
        Rayfield:Notify({ Title = "Key Status", Content = "Your key has EXPIRED!", Duration = 5 })
        resetKey() -- Auto-reset expired key
        return
    end

    local hours = math.floor(remaining / 3600)
    remaining = remaining % 3600
    local minutes = math.floor(remaining / 60)
    local seconds = remaining % 60

    local message = string.format("Time Left: %d hours, %d minutes, %d seconds", hours, minutes, seconds)
    Rayfield:Notify({ Title = "Key Status", Content = message, Duration = 7 })
end

-- Add Buy Premium Button
buyPremiumButton = KeyTab:CreateButton({
    Name = "✨ Buy Premium Access",
    Callback = function()
        setclipboard("https://discord.gg/zFQMEvT6")
        Rayfield:Notify({
            Title = "Premium Discord Link Copied!",
            Content = "Join our Discord to learn how to get Premium.",
            Duration = 8
        })
    end
})

-- Add Reset Key Button
resetKeyButton = KeyTab:CreateButton({
    Name = "🔄 Reset Key",
    Callback = resetKey
})

-- Add Show Key Timer Button
showKeyTimerButton = KeyTab:CreateButton({
    Name = "⏱ Show Key Timer",
    Callback = showKeyTimer
})

-- Add Access Script Button
accessScriptButton = KeyTab:CreateButton({
    Name = "🚀 Access Script",
    Callback = function()
        if keyValid then
            Rayfield:Destroy()
            task.wait(1)
            -- IMPORTANT: Replace with the actual URL of your main FREE script
            loadstring(game:HttpGet("https://raw.githubusercontent.com/SlenderYt567/sc/refs/heads/main/.gitignore"))()
        else
            Rayfield:Notify({
                Title = "⚠ Key Not Validated",
                Content = "Please enter a valid key first.",
                Duration = 5
            })
        end
    end
})

-- Perform initial key validation when the script starts
keyValid = loadKeyConfig()
print("Final 'keyValid' state after initial load:", keyValid)
updateUIState(keyValid) -- Set initial UI state
