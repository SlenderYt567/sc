-- ! IMPORTANT: This script must be executed by a script executor (e.g., Synapse X, Script-Ware, Fluxus).
-- ! It will not work as a regular LocalScript in Roblox Studio or a published game,
-- ! as it uses game:HttpGet and loadstring.

if game.PlaceId ~= 228181322 then return end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

local Window = Rayfield:CreateWindow({
    Name = "Slender Hub Premium - Dinosaur Simulator",
    LoadingTitle = "Slender Hub Premium",
    LoadingSubtitle = "by Gemini & Slender",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "SlenderHub",
        FileName = "DinoSimConfigPremium"
    },
    Discord = { Enabled = false },
    KeySystem = false
})

-- === GENERAL CONTROL VARIABLES ===
local isAmberESPEnabled = false
local espObjects = {}
local amberListeners = { Added = nil, Removed = nil }

local originalWalkSpeed = 16
local originalJumpPower = 50
local originalAutoRotate = true

local isAutoEatActive = false
local autoEatTask = nil
local isAutoWaterActive = false
local autoWaterTask = nil
local isAutoDNAActive = false
local autoDNATask = nil
local isAutoCollectActive = false
local autoCollectTask = nil
local isAutoDamageActive = false
local autoDamageTask = nil
local isAutoAOEDamageActive = false
local autoAOEDamageTask = nil
local isNoClipActive = false
local noClipConnection = nil

-- === PREMIUM SETTINGS ===
local SAFE_DNA_FARM_LOCATION = Vector3.new(-310.9116516113281, 949.654052734375, 652.5374145507812)
local AUTO_WALK_SPEED = 70
local const_AmberCollectSpeed = 70 -- [CORRECTED] Speed reduced as requested

-- === Amber ESP Functions (Unchanged) ===
local function disableAmberESPForPart(part) if not part then return end; local h = part:FindFirstChild("ESPHighlight"); if h then h:Destroy() end; local b = part:FindFirstChild("AmberDistance"); if b then b:Destroy() end; for i = #espObjects, 1, -1 do if espObjects[i] == part then table.remove(espObjects, i); break end end end
local function clearAllAmberESP() local a = {}; for _, o in pairs(espObjects) do table.insert(a, o) end; for _, o in pairs(a) do disableAmberESPForPart(o) end; table.clear(espObjects) end
local function enableAmberESPForPart(part) if not part or not part:IsA("BasePart") or not part.Name:lower():find("amber") or part:FindFirstChild("ESPHighlight") then return end; local h = Instance.new("Highlight", part); h.Name = "ESPHighlight"; h.FillColor = Color3.fromRGB(255, 130, 0); h.OutlineColor = Color3.fromRGB(255, 255, 255); h.FillTransparency = 0.1; h.Adornee = part; local b = Instance.new("BillboardGui", part); b.Name = "AmberDistance"; b.Size = UDim2.new(0, 100, 0, 20); b.AlwaysOnTop = true; b.StudsOffset = Vector3.new(0, 2.5, 0); b.Adornee = part; local t = Instance.new("TextLabel", b); t.Size = UDim2.new(1, 0, 1, 0); t.BackgroundTransparency = 1; t.TextColor3 = Color3.fromRGB(255, 255, 0); t.TextStrokeTransparency = 0.5; t.TextScaled = true; t.Font = Enum.Font.GothamBold; t.Name = "DistanceLabel"; t.Text = "Loading..."; table.insert(espObjects, part) end
local function scanAndApplyAmberESP() clearAllAmberESP(); for _, v in pairs(Workspace:GetDescendants()) do if v:IsA("BasePart") and v.Name:lower():find("amber") then enableAmberESPForPart(v) end end end
local function setupAmberListeners() amberListeners.Added = Workspace.DescendantAdded:Connect(function(d) if isAmberESPEnabled and d:IsA("BasePart") and d.Name:lower():find("amber") then enableAmberESPForPart(d) end end); amberListeners.Removed = Workspace.DescendantRemoving:Connect(function(d) if d:IsA("BasePart") and d.Name:lower():find("amber") then disableAmberESPForPart(d) end end) end
local function disconnectAmberListeners() if amberListeners.Added then amberListeners.Added:Disconnect(); amberListeners.Added = nil end; if amberListeners.Removed then amberListeners.Removed:Disconnect(); amberListeners.Removed = nil end end
task.spawn(function() while task.wait(0.5) do if isAmberESPEnabled then for i = #espObjects, 1, -1 do local o = espObjects[i]; if not o or not o:IsDescendantOf(Workspace) or not o.Parent then disableAmberESPForPart(o); continue end; local g = o:FindFirstChild("AmberDistance"); if g and g:FindFirstChild("DistanceLabel") and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then local d = math.floor((o.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude); g.DistanceLabel.Text = "Distance: " .. d .. " studs" else disableAmberESPForPart(o) end end end end end)

-- === Helper & Farming Logic ===
local function findClosest(partNames, maxDistance) local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart"); if not hrp then return nil end; local closestPart, minDistance = nil, maxDistance or math.huge; for _, part in ipairs(Workspace:GetDescendants()) do if part:IsA("BasePart") then local isMatch = false; for _, name in ipairs(partNames) do if part.Name:lower():find(name) then isMatch = true; break end end; if isMatch then local distance = (part.Position - hrp.Position).Magnitude; if distance < minDistance then minDistance = distance; closestPart = part end end end end; return closestPart end
local function restoreHumanoidProperties() local c = LocalPlayer.Character; if c then local h = c:FindFirstChildOfClass("Humanoid"); if h then h.WalkSpeed = originalWalkSpeed; h.JumpPower = originalJumpPower; h.AutoRotate = originalAutoRotate; h:MoveTo(h.Parent.HumanoidRootPart.Position) end end end

-- Premium Loops
local function autoEatLoop() while isAutoEatActive and LocalPlayer.Character do local food = findClosest({"leaf"}, 1000); if food then workspace.GameEvents.EatPlant:FireServer(food); task.wait(0.1) else task.wait(1) end end; autoEatTask = nil end
local function autoWaterLoop() while isAutoWaterActive and LocalPlayer.Character do local water = findClosest({"water", "wavetile"}, 1000); if water then workspace.GameEvents.addThirst:FireServer(water, water.Position); task.wait(0.1) else task.wait(1) end end; autoWaterTask = nil end
local function autoDamageLoop() while isAutoDamageActive do workspace.GameEvents.Damage:FireServer(); task.wait(0.03) end; autoDamageTask = nil end
local function autoAOEDamageLoop() while isAutoAOEDamageActive do workspace.GameEvents.AOEDamage:FireServer(); task.wait(0.03) end; autoAOEDamageTask = nil end

local function stopAutoCollectAmber() isAutoCollectActive = false; if autoCollectTask then task.cancel(autoCollectTask); autoCollectTask = nil end; restoreHumanoidProperties(); Rayfield:Notify({Title = "Auto Collect Amber", Content = "Stopped.", Duration = 3}) end
local function startAutoCollectAmber() isAutoCollectActive = true; local char = LocalPlayer.Character; if not char or not char:FindFirstChild("Humanoid") then Rayfield:Notify({Title = "Error", Content = "Character not available."}); isAutoCollectActive = false; return end; local hum = char.Humanoid; originalWalkSpeed = hum.WalkSpeed; hum.WalkSpeed = const_AmberCollectSpeed; hum.JumpPower = 0; hum.AutoRotate = false; Rayfield:Notify({Title = "Auto Collect Amber", Content = "Started...", Duration = 3}); autoCollectTask = task.spawn(function() if not isAmberESPEnabled then isAmberESPEnabled = true; setupAmberListeners(); scanAndApplyAmberESP() end; while isAutoCollectActive and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do local hrp = LocalPlayer.Character.HumanoidRootPart; local closestAmber, minDistance = nil, math.huge; scanAndApplyAmberESP(); for _, amberPart in pairs(espObjects) do if amberPart and amberPart:IsDescendantOf(Workspace) then local dist = (amberPart.Position - hrp.Position).Magnitude; if dist < minDistance then minDistance = dist; closestAmber = amberPart end end end; if closestAmber then hum:MoveTo(closestAmber.Position); while isAutoCollectActive and closestAmber:IsDescendantOf(Workspace) and (hrp.Position - closestAmber.Position).Magnitude > 5 do task.wait() end else Rayfield:Notify({Title = "Auto Collect", Content = "No amber found, waiting...", Duration = 2}); task.wait(3) end end; stopAutoCollectAmber() end) end

local function stopAutoDNAFarm() isAutoDNAActive = false; if autoDNATask then task.cancel(autoDNATask); autoDNATask = nil end; isAutoEatActive = false; if autoEatTask then task.cancel(autoEatTask); autoEatTask = nil end; isAutoWaterActive = false; if autoWaterTask then task.cancel(autoWaterTask); autoWaterTask = nil end; restoreHumanoidProperties(); Rayfield:Notify({Title = "Auto DNA Farm", Content = "Stopped.", Duration = 3}) end
local function startAutoDNAFarm() isAutoDNAActive = true; Rayfield:Notify({Title = "Auto DNA Farm", Content = "Starting...", Duration = 3}); local c = LocalPlayer.Character; if not c or not c:FindFirstChild("Humanoid") then isAutoDNAActive = false; return end; local h = c.Humanoid; originalWalkSpeed = h.WalkSpeed; h.WalkSpeed = AUTO_WALK_SPEED; h.JumpPower = 0; h.AutoRotate = false; isAutoEatActive = true; autoEatTask = task.spawn(autoEatLoop); isAutoWaterActive = true; autoWaterTask = task.spawn(autoWaterLoop); autoDNATask = task.spawn(function() while isAutoDNAActive and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do local hrp = LocalPlayer.Character.HumanoidRootPart; if (hrp.Position - SAFE_DNA_FARM_LOCATION).Magnitude > 5 then h:MoveTo(SAFE_DNA_FARM_LOCATION) end; task.wait(2) end; stopAutoDNAFarm() end) end

-- === No Clip ===
local function startNoClip() isNoClipActive = true; noClipConnection = RunService.Stepped:Connect(function() if isNoClipActive and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then for _, v in pairs(LocalPlayer.Character:GetDescendants()) do if v:IsA("BasePart") and v.CanCollide then v.CanCollide = false end end end end); Rayfield:Notify({Title = "No Clip", Content = "Enabled. You can now walk through objects.", Duration = 3}) end
local function stopNoClip() isNoClipActive = false; if noClipConnection then noClipConnection:Disconnect(); noClipConnection = nil end; Rayfield:Notify({Title = "No Clip", Content = "Disabled. Collision restored.", Duration = 3}) end

-- === Rayfield UI ===
local espTab = Window:CreateTab("ESP")
espTab:CreateToggle({Name = "Amber ESP (with distance)", CurrentValue = false, Callback = function(Value) isAmberESPEnabled = Value; if Value then scanAndApplyAmberESP(); setupAmberListeners() else disconnectAmberListeners(); clearAllAmberESP() end end})
espTab:CreateToggle({Name = "(Premium) Auto Collect Amber", CurrentValue = false, Callback = function(Value) if Value then if isAutoDNAActive then stopAutoDNAFarm() end; startAutoCollectAmber() else stopAutoCollectAmber() end end})
espTab:CreateToggle({Name = "(Premium) No Clip", CurrentValue = false, Callback = function(Value) if Value then startNoClip() else stopNoClip() end end})

local farmTab = Window:CreateTab("Farm")
farmTab:CreateToggle({Name = "(Premium) Auto Eat", CurrentValue = false, Callback = function(Value) if isAutoDNAActive then return end; isAutoEatActive = Value; if Value then Rayfield:Notify({Title="Auto Eat", Content="Enabled"}); autoEatTask = task.spawn(autoEatLoop) else Rayfield:Notify({Title="Auto Eat", Content="Disabled"}); if autoEatTask then task.cancel(autoEatTask); autoEatTask = nil end end end })
farmTab:CreateToggle({Name = "(Premium) Auto Water", CurrentValue = false, Callback = function(Value) if isAutoDNAActive then return end; isAutoWaterActive = Value; if Value then Rayfield:Notify({Title="Auto Water", Content="Enabled"}); autoWaterTask = task.spawn(autoWaterLoop) else Rayfield:Notify({Title="Auto Water", Content="Disabled"}); if autoWaterTask then task.cancel(autoWaterTask); autoWaterTask = nil end end end })
farmTab:CreateToggle({Name = "Auto DNA Farm (Fast Walk)", CurrentValue = false, Callback = function(Value) if Value then if isAutoCollectActive then stopAutoCollectAmber() end; startAutoDNAFarm() else stopAutoDNAFarm() end end})

local damageTab = Window:Create-Tab("Damage")
damageTab:CreateToggle({Name = "(Premium) Auto Damage", CurrentValue = false, Callback = function(Value) isAutoDamageActive = Value; if Value then Rayfield:Notify({Title="Auto Damage", Content="Enabled"}); autoDamageTask = task.spawn(autoDamageLoop) else Rayfield:Notify({Title="Auto Damage", Content="Disabled"}); if autoDamageTask then task.cancel(autoDamageTask); autoDamageTask = nil end end end})
damageTab:CreateToggle({Name = "(Premium) Auto AOE Damage", CurrentValue = false, Callback = function(Value) isAutoAOEDamageActive = Value; if Value then Rayfield:Notify({Title="Auto AOE Damage", Content="Enabled"}); autoAOEDamageTask = task.spawn(autoAOEDamageLoop) else Rayfield:Notify({Title="Auto AOE Damage", Content="Disabled"}); if autoAOEDamageTask then task.cancel(autoAOEDamageTask); autoAOEDamageTask = nil end end end})
